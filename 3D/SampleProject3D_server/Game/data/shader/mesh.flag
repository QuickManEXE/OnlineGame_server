#version 430

uniform vec3 lightPos[5];
uniform vec3 lightDir[5];
uniform vec3 lightAmbientColor[5];
uniform vec3 lightDiffuseColor[5];
uniform float lightAttenuation[5];
uniform int lightType[5];
uniform float lightRadiationAngle[5];
uniform vec2 stscroll;
uniform vec3 eyeVec;
uniform vec3 eyePos;
uniform vec4 Ambient;
uniform vec4 Diffuse;
uniform vec3 Specular;
uniform vec3 Emissive;
uniform float Pow;
uniform float alpha;
uniform int lighting;
uniform int uSetex;
uniform vec4 fogColor;
uniform float fogNear;
uniform float fogFar;
//頂点シェーダーから受け取る変数
in vec3 V;//位置
in vec3 N;//法線ベクトル
in vec2 texCoord;
uniform sampler2D sampler;
in vec4 vShadowCoord;    //!< シャドウデプスマップの参照用座標

out vec4 out_color;

uniform sampler2D depth_tex;    //!< デプス値テクスチャ
uniform float shadow_ambient;    //!< 影の濃さ

vec2 poissonDisk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);
float random(vec4 seed4){
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
    return fract(sin(dot_product) * 43758.5453);
}
void main(void)
{
 
	vec4 texColor=vec4(1,1,1,1);
	if(uSetex!=0) {
		texColor = texture2D(sampler, texCoord+stscroll);
	}
	vec3 A=vec3(0,0,0);
	vec3 D=vec3(0,0,0);
	vec3 S=vec3(0,0,0);
	vec3 color;
	float visibility = 1.0;
	if(lighting==1) {
		for(int i=0;i<5;i++) {
			if(lightType[i] == 0) continue;
			vec3 vec=vec3(0,0,0);
			float p=0;
			if(lightType[i] == 1) {
				vec = -lightDir[i];
				p=1;
			} else 
			if(lightType[i] == 2 || lightType[i] == 3 ) {
				vec =  vec3(V - lightPos[i]);
				float l = length(vec);
				vec = normalize(vec);
				if(l>0) 
					p = clamp(1/(pow(l*lightAttenuation[i],2)),0.0,1.0);
				else 
					p=0;
				if(lightType[i] == 3) {
					float t = dot(vec,lightDir[i]);
					t=clamp(t+sin(lightRadiationAngle[i]),0.0,1.0);
					//if(t<1) p = 0;
					p*=pow(t,20);
				}
				vec = -vec;
			}
			float NL = dot(N, vec);
			/*if(i==0) {
				float bias = 0.005*tan(acos(NL)); // cosThetaはdot( n,l )で0と1の間にします。
				bias = clamp(bias, 0.0,0.01);
				for (int i=0;i<4;i++){
						int index =  int(mod(16.0*random(vec4(gl_FragCoord.xyy, i)),16.0));// 0から15のうちのランダムな数字、各ピクセル（と各i)で違うようにする。
						if ( texture2D( depth_tex, vShadowCoord.xy + poissonDisk[i]/700.0 ).z  <  vShadowCoord.z-bias ){
							visibility-=0.2;
					}
				}
			}*/


			//NL = (NL>0.5) ? 1.0:0;
			vec3 Reflect = normalize(2 * NL * N - vec);
			S += pow(clamp(dot(Reflect, -eyeVec),0.0,1.0), Pow)*p;
			if(lightType[i] == 4 ) {
				D+=lightDiffuseColor[i];
				A+=lightDiffuseColor[i];
			} else {
				D += lightDiffuseColor[i]*clamp(NL,0.0,1.0)*p;
				A += lightAmbientColor[i]*p;
			}
		}
		float l = length(eyePos-V);
		float f = clamp((fogFar-l)/(fogFar-fogNear),0.0,1.0);

		color = texColor.xyz*(visibility*Diffuse.xyz * clamp(D,0.0,1.0) + Ambient.xyz * clamp(A,0.0,1.0)) + visibility*Specular* clamp(S,0.0,1.0)+Emissive;
		
		out_color = vec4(color+fogColor.xyz*(1.0-f),clamp((texColor.w*Diffuse.w*alpha)-((1.0-fogColor.w)*(1.0-f)),0.0f,1.0f));
	
	} else {
		color = Diffuse.xyz  + Ambient.xyz;
		out_color= (texColor * vec4(color, Diffuse.w*alpha));
	}
}
